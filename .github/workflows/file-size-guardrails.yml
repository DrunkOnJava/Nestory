name: File Size Guardrails

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  file-size-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check file sizes with override support
      run: |
        echo "🔍 Running file size guardrail check with override support..."
        
        # Make script executable
        chmod +x ./Scripts/check-file-sizes.sh
        
        # Run the proper file size check script that respects overrides
        ./Scripts/check-file-sizes.sh
        
        # Capture the exit code to determine if there were violations
        EXIT_CODE=$?
        
        if [ $EXIT_CODE -eq 1 ]; then
          echo "CRITICAL_VIOLATION=true" >> $GITHUB_ENV
        else
          echo "CRITICAL_VIOLATION=false" >> $GITHUB_ENV
        fi
    
    - name: Fail build if critical violations found
      run: |
        if [ "${CRITICAL_VIOLATION:-false}" = "true" ]; then
          echo ""
          echo "🚨 BUILD FAILED: Critical file size violations found"
          echo ""
          echo "📋 Files exceeding 600 lines must be modularized before merging."
          echo ""
          echo "📚 Resolution Options:"
          echo "1. 🔧 Modularize the file(s) into smaller components"
          echo "2. 📋 Request temporary override approval:"
          echo "   make approve-large-file FILE=path/to/file.swift"
          echo ""
          echo "📖 Modularization Guidelines:"
          echo "• Split large files into focused components"
          echo "• Move components to appropriate architectural layers"
          echo "• See CLAUDE.md for detailed procedures"
          echo "• Override tracking: .file-size-override"
          echo ""
          echo "🎯 Target Metrics:"
          echo "• 0 files >600 lines (Critical)"
          echo "• <5 files 500-599 lines (High Priority)"
          echo "• <10 files 400-499 lines (Medium Priority)"
          echo ""
          exit 1
        else
          echo "✅ No critical file size violations found"
        fi

  build-test:
    runs-on: macos-latest
    needs: file-size-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Build project
      run: |
        echo "🔨 Building project to verify no compilation regressions..."
        xcodebuild build \
          -project Nestory.xcodeproj \
          -scheme Nestory-Dev \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max' \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES