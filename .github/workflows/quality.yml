name: Quality Gates

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  SWIFT_VERSION: '5.9'

jobs:
  quality-checks:
    name: Quality Verification
    runs-on: macos-14
    timeout-minutes: 15
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'
      
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData/Nestory-*
            DevTools/nestoryctl/.build
            ~/Library/Caches/org.swift.swiftpm
          key: quality-${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/project.yml') }}
          restore-keys: |
            quality-${{ runner.os }}-spm-
            
      - name: Cache Tools
        uses: actions/cache@v4
        with:
          path: |
            /opt/homebrew/bin/swiftlint
            /opt/homebrew/bin/swiftformat
          key: quality-tools-${{ runner.os }}-${{ hashFiles('.github/workflows/quality.yml') }}
          restore-keys: |
            quality-tools-${{ runner.os }}-
      
      - name: Install Tools
        run: |
          if ! command -v swiftformat &> /dev/null; then
            echo "📦 Installing SwiftFormat..."
            brew install swiftformat
          fi
          if ! command -v swiftlint &> /dev/null; then
            echo "📦 Installing SwiftLint..."
            brew install swiftlint
          fi
      
      - name: Format Check
        run: |
          echo "📝 Checking code formatting..."
          swiftformat --lint . || echo "⚠️ Formatting issues detected (non-blocking)"
      
      - name: Lint Check
        run: |
          echo "🧹 Running SwiftLint..."
          swiftlint lint --quiet || echo "⚠️ Linting issues detected (non-blocking)"
      
      - name: Build nestoryctl
        run: |
          echo "🔨 Building nestoryctl..."
          swift build -c release --package-path DevTools/nestoryctl
      
      - name: SPEC Verification
        run: |
          echo "📋 Verifying SPEC integrity..."
          ./DevTools/nestoryctl/.build/release/nestoryctl spec-verify
      
      - name: Architecture Verification
        run: |
          echo "🏗️ Verifying architecture conformance..."
          ./DevTools/nestoryctl/.build/release/nestoryctl arch-verify
      
      - name: Run Architecture Tests
        run: |
          echo "🧪 Running architecture tests..."
          swift test --filter ArchitectureTests
      
      - name: SPM Audit
        run: |
          echo "📦 Auditing SPM dependencies..."
          ./DevTools/nestoryctl/.build/release/nestoryctl spm-audit || echo "⚠️ Package.resolved not found (expected for initial setup)"
      
      - name: License Check
        run: |
          echo "📜 Checking licenses..."
          ./DevTools/nestoryctl/.build/release/nestoryctl licenses
      
      - name: Full Guard Suite
        run: |
          echo "🔍 Running complete guard suite..."
          make guard
      
      - name: Quality Metrics Collection
        if: always()
        env:
          PROMETHEUS_PUSHGATEWAY_URL: http://192.168.1.5:9091
        run: |
          echo "📊 Collecting quality metrics..."
          
          # Count quality issues (simplified)
          LINT_ISSUES=0
          FORMAT_ISSUES=0
          
          # Run SwiftLint for metrics only (non-blocking)
          if command -v swiftlint &> /dev/null; then
            LINT_ISSUES=$(swiftlint lint --quiet 2>/dev/null | wc -l || echo 0)
          fi
          
          # Check format issues
          if command -v swiftformat &> /dev/null; then
            FORMAT_ISSUES=$(swiftformat --lint . 2>/dev/null | wc -l || echo 0)
          fi
          
          echo "Quality Metrics:"
          echo "  Lint Issues: $LINT_ISSUES"
          echo "  Format Issues: $FORMAT_ISSUES"
          echo "  Job Status: ${{ job.status }}"
          
          # Push metrics to monitoring if available
          if command -v curl &> /dev/null && [[ -n "${PROMETHEUS_PUSHGATEWAY_URL}" ]]; then
            cat << EOF | curl -X POST "${PROMETHEUS_PUSHGATEWAY_URL}/metrics/job/nestory_quality/instance/${GITHUB_RUN_ID}" --data-binary @- || echo "Failed to push quality metrics"
          nestory_lint_issues_total{branch="${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}"} $LINT_ISSUES
          nestory_format_issues_total{branch="${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}"} $FORMAT_ISSUES
          nestory_quality_check_success{branch="${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}"} ${{ job.status == 'success' && '1' || '0' }}
          EOF
            echo "✅ Quality metrics pushed to monitoring"
          fi
          
      - name: Update Build Status
        if: always()
        run: |
          echo "" >> BUILD_STATUS.md
          echo "## CI Run: $(date '+%Y-%m-%d %H:%M:%S')" >> BUILD_STATUS.md
          echo "- Branch: ${{ github.head_ref || github.ref_name }}" >> BUILD_STATUS.md
          echo "- Commit: ${{ github.sha }}" >> BUILD_STATUS.md
          echo "- Status: ${{ job.status }}" >> BUILD_STATUS.md
          echo "" >> BUILD_STATUS.md
      
      - name: Upload Build Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-status
          path: BUILD_STATUS.md
      
      - name: Upload Test Results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            .build/*/testOutput
            *.xcresult